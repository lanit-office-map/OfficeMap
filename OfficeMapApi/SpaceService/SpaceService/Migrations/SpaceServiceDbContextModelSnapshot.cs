// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SpaceService.Database.Entities;

namespace SpaceService.Migrations
{
    [DbContext(typeof(SpaceServiceDbContext))]
    partial class SpaceServiceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SpaceService.Database.Entities.DbMapFile", b =>
                {
                    b.Property<int>("MapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Content")
                        .HasColumnType("binary(50)")
                        .IsFixedLength(true)
                        .HasMaxLength(50);

                    b.Property<string>("Extension")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid>("MapGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MapGUID")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("Obsolete")
                        .HasColumnType("bit");

                    b.HasKey("MapId")
                        .HasName("PK_Maps");

                    b.ToTable("MapFiles");
                });

            modelBuilder.Entity("SpaceService.Database.Entities.DbOffice", b =>
                {
                    b.Property<int>("OfficeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Building")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("City")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("House")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("Obsolete")
                        .HasColumnType("bit");

                    b.Property<Guid>("OfficeGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OfficeGUID")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("Phone_Number")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Street")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("OfficeId");

                    b.ToTable("Offices");
                });

            modelBuilder.Entity("SpaceService.Database.Entities.DbSpace", b =>
                {
                    b.Property<int>("SpaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Floor")
                        .HasColumnType("int");

                    b.Property<int?>("MapId")
                        .HasColumnType("int");

                    b.Property<bool>("Obsolete")
                        .HasColumnType("bit");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<Guid>("SpaceGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SpaceGUID")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("SpaceName")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("SpaceId")
                        .HasName("PK__Spaces");

                    b.HasIndex("MapId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("ParentId");

                    b.HasIndex("TypeId");

                    b.ToTable("Spaces");
                });

            modelBuilder.Entity("SpaceService.Database.Entities.DbSpaceType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Bookable")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<bool>("Obsolete")
                        .HasColumnType("bit");

                    b.Property<Guid>("SpaceTypeGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SpaceTypeGUID")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("TypeId");

                    b.ToTable("SpaceTypes");
                });

            modelBuilder.Entity("SpaceService.Database.Entities.DbSpace", b =>
                {
                    b.HasOne("SpaceService.Database.Entities.DbMapFile", "Map")
                        .WithMany("Spaces")
                        .HasForeignKey("MapId");

                    b.HasOne("SpaceService.Database.Entities.DbOffice", "Office")
                        .WithMany("Spaces")
                        .HasForeignKey("OfficeId")
                        .IsRequired();

                    b.HasOne("SpaceService.Database.Entities.DbSpace", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId");

                    b.HasOne("SpaceService.Database.Entities.DbSpaceType", "Type")
                        .WithMany("Spaces")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
